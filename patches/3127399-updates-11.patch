diff --git a/multiple_sitemap.install b/multiple_sitemap.install
index 7511ff3..2072d18 100644
--- a/multiple_sitemap.install
+++ b/multiple_sitemap.install
@@ -9,129 +9,129 @@
  * Implements hook_schema().
  */
 function multiple_sitemap_schema() {
-  $schema['multiple_sitemap'] = array(
+  $schema['multiple_sitemap'] = [
     'description' => 'The base table for multiple sitemap.',
-    'fields' => array(
-      'ms_id' => array(
+    'fields' => [
+      'ms_id' => [
         'description' => 'The multiple sitemap id',
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE,
-      ),
-      'file_name' => array(
+      ],
+      'file_name' => [
         'description' => 'Sub sitemap file name',
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => '',
-      ),
-      'custom_links' => array(
+      ],
+      'custom_links' => [
         'description' => 'custom links',
         'type' => 'text',
         'size' => 'medium',
-      ),
-    ),
-    'unique keys' => array(
-      'file_name' => array('file_name'),
-    ),
-    'primary key' => array('ms_id'),
-  );
+      ],
+    ],
+    'unique keys' => [
+      'file_name' => ['file_name'],
+    ],
+    'primary key' => ['ms_id'],
+  ];
 
-  $schema['multiple_sitemap_content'] = array(
+  $schema['multiple_sitemap_content'] = [
     'description' => 'The child table for multiple sitemap content type.',
-    'fields' => array(
-      'target_ms_id' => array(
+    'fields' => [
+      'target_ms_id' => [
         'description' => 'The multiple sitemap id',
         'type' => 'int',
         'not null' => TRUE,
-      ),
-      'content_type' => array(
+      ],
+      'content_type' => [
         'description' => 'content type machine name',
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
-      ),
-      'priority' => array(
+      ],
+      'priority' => [
         'description' => 'priority of links',
         'type' => 'varchar',
         'length' => 4,
         'not null' => TRUE,
         'default' => '0.5',
-      ),
-      'changefreq' => array(
+      ],
+      'changefreq' => [
         'description' => 'changefreq of links',
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => 'monthly',
-      ),
-    ),
-    'primary key' => array('target_ms_id', 'content_type'),
-  );
+      ],
+    ],
+    'primary key' => ['target_ms_id', 'content_type'],
+  ];
 
-  $schema['multiple_sitemap_menu'] = array(
+  $schema['multiple_sitemap_menu'] = [
     'description' => 'The child table for multiple sitemap menu.',
-    'fields' => array(
-      'target_ms_id' => array(
+    'fields' => [
+      'target_ms_id' => [
         'description' => 'The multiple sitemap id',
         'type' => 'int',
         'not null' => TRUE,
-      ),
-      'menu_type' => array(
+      ],
+      'menu_type' => [
         'description' => 'menu machine name',
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
-      ),
-      'priority' => array(
+      ],
+      'priority' => [
         'description' => 'priority of links',
         'type' => 'varchar',
         'length' => 4,
         'not null' => TRUE,
         'default' => '0.5',
-      ),
-      'changefreq' => array(
+      ],
+      'changefreq' => [
         'description' => 'changefreq of links',
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => 'monthly',
-      ),
-    ),
-    'primary key' => array('target_ms_id', 'menu_type'),
-  );
+      ],
+    ],
+    'primary key' => ['target_ms_id', 'menu_type'],
+  ];
 
-  $schema['multiple_sitemap_vocab'] = array(
+  $schema['multiple_sitemap_vocab'] = [
     'description' => 'The child table for multiple sitemap vocabs.',
-    'fields' => array(
-      'target_ms_id' => array(
+    'fields' => [
+      'target_ms_id' => [
         'description' => 'The multiple sitemap id',
         'type' => 'int',
         'not null' => TRUE,
-      ),
-      'vocab_type' => array(
+      ],
+      'vocab_type' => [
         'description' => 'vocab machine name',
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
-      ),
-      'priority' => array(
+      ],
+      'priority' => [
         'description' => 'priority of links',
         'type' => 'varchar',
         'length' => 4,
         'not null' => TRUE,
         'default' => '0.5',
-      ),
-      'changefreq' => array(
+      ],
+      'changefreq' => [
         'description' => 'changefreq of links',
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => 'monthly',
-      ),
-    ),
-    'primary key' => array('target_ms_id', 'vocab_type'),
-  );
+      ],
+    ],
+    'primary key' => ['target_ms_id', 'vocab_type'],
+  ];
 
   return $schema;
 }
diff --git a/multiple_sitemap.module b/multiple_sitemap.module
index 979711a..29a405a 100644
--- a/multiple_sitemap.module
+++ b/multiple_sitemap.module
@@ -6,7 +6,6 @@
  */
 
 use Drupal\Core\Routing\RouteMatchInterface;
-use Drupal\multiple_sitemap\Plugin\QueueWorker\MultipleSitemapUpdateXml;
 
 /**
  * Implements hook_help().
diff --git a/multiple_sitemap.services.yml b/multiple_sitemap.services.yml
new file mode 100644
index 0000000..726c3cd
--- /dev/null
+++ b/multiple_sitemap.services.yml
@@ -0,0 +1,4 @@
+services:
+  multiple_sitemap.db:
+    class: Drupal\multiple_sitemap\MultipleSitemapDB
+    arguments: ['@messenger']
diff --git a/src/Controller/MultipleSitemap.php b/src/Controller/MultipleSitemap.php
index 5478e79..24cb5d5 100644
--- a/src/Controller/MultipleSitemap.php
+++ b/src/Controller/MultipleSitemap.php
@@ -1,8 +1,4 @@
 <?php
-/**
- * @file
- * Contains \Drupal\multiple_sitemap\MultipleSitemap.
- */
 
 namespace Drupal\multiple_sitemap\Controller;
 
@@ -10,6 +6,9 @@ use Drupal\node\Entity\NodeType;
 use Drupal\system\Entity\Menu;
 use Drupal\taxonomy\Entity\Vocabulary;
 
+/**
+ *
+ */
 class MultipleSitemap {
 
   /**
@@ -19,7 +18,7 @@ class MultipleSitemap {
    *   Having content types.
    */
   public static function multipleSitemapGetNodeTypes() {
-    $types = array();
+    $types = [];
     $content_types = NodeType::loadMultiple();
 
     if (!empty($content_types)) {
@@ -39,7 +38,7 @@ class MultipleSitemap {
    *   Having menu types.
    */
   public static function multipleSitemapGetMenuTypes() {
-    $menus = array();
+    $menus = [];
     $menu_types = Menu::loadMultiple();
 
     if (!empty($menu_types)) {
@@ -59,7 +58,7 @@ class MultipleSitemap {
    *   Having vocabs types.
    */
   public static function multipleSitemapGetVocabTypes() {
-    $vocabs = array();
+    $vocabs = [];
     $vocabs_types = Vocabulary::loadMultiple();
 
     if (!empty($vocabs_types)) {
@@ -80,7 +79,7 @@ class MultipleSitemap {
    */
   public static function multiple_sitemap_get_priority_options() {
 
-    $priority = array(
+    $priority = [
       '0.1' => '0.1',
       '0.2' => '0.2',
       '0.3' => '0.3',
@@ -91,7 +90,7 @@ class MultipleSitemap {
       '0.8' => '0.8',
       '0.9' => '0.9',
       '1.0' => '1.0',
-    );
+    ];
 
     return $priority;
   }
@@ -104,7 +103,7 @@ class MultipleSitemap {
    */
   public static function multiple_sitemap_get_changefreq_options() {
 
-    $changefreq = array(
+    $changefreq = [
       'always' => 'always',
       'hourly' => 'hourly',
       'daily' => 'daily',
@@ -112,8 +111,9 @@ class MultipleSitemap {
       'monthly' => 'monthly',
       'yearly' => 'yearly',
       'never' => 'never',
-    );
+    ];
 
     return $changefreq;
   }
+
 }
diff --git a/src/Controller/MultipleSitemapDashboard.php b/src/Controller/MultipleSitemapDashboard.php
index a6791ac..f4b983d 100644
--- a/src/Controller/MultipleSitemapDashboard.php
+++ b/src/Controller/MultipleSitemapDashboard.php
@@ -1,8 +1,4 @@
 <?php
-/**
- * @file
- * Contains \Drupal\multiple_sitemap\Controller\MultipleSitemapDashboard.
- */
 
 namespace Drupal\multiple_sitemap\Controller;
 
@@ -14,7 +10,11 @@ use Drupal\Core\Url;
  * Returns responses for MultipleSitemapDashboard.
  */
 class MultipleSitemapDashboard extends ControllerBase {
-  function multipleSitemapDashboard() {
+
+  /**
+   *
+   */
+  public function multipleSitemapDashboard() {
 
     $conn = \Drupal::database();
     if ($conn->schema()->tableExists('multiple_sitemap')) {
@@ -24,14 +24,14 @@ class MultipleSitemapDashboard extends ControllerBase {
         ->execute()
         ->fetchAll();
 
-      $header = array(
+      $header = [
         'File Name',
         'Custom links',
         'Edit',
         'Delete',
-      );
+      ];
 
-      $rows = array();
+      $rows = [];
       if (!empty($results)) {
         foreach ($results as $key => $result) {
           $ms_id = $result->ms_id;
@@ -39,8 +39,8 @@ class MultipleSitemapDashboard extends ControllerBase {
           $rows[$key]['fname'] = $result->file_name;
           $rows[$key]['custom_links'] = $result->custom_links;
 
-          $rows[$key]['edit'] = Link::fromTextAndUrl(t('Edit'), Url::fromRoute('multiple_sitemap.edit_multiple_sitemap', array('ms_id' => $ms_id)))->toString();
-          $rows[$key]['delete'] = Link::fromTextAndUrl(t('Delete'), Url::fromRoute('multiple_sitemap.delete_multiple_sitemap', array('ms_id' => $ms_id)))->toString();
+          $rows[$key]['edit'] = Link::fromTextAndUrl(t('Edit'), Url::fromRoute('multiple_sitemap.edit_multiple_sitemap', ['ms_id' => $ms_id]))->toString();
+          $rows[$key]['delete'] = Link::fromTextAndUrl(t('Delete'), Url::fromRoute('multiple_sitemap.delete_multiple_sitemap', ['ms_id' => $ms_id]))->toString();
         }
 
         $table['table'] = [
@@ -49,15 +49,14 @@ class MultipleSitemapDashboard extends ControllerBase {
           '#rows' => $rows,
         ];
 
-
         return $table;
       }
     }
 
-
-    return array(
+    return [
       '#type' => 'markup',
       '#markup' => $this->t('Your installation of multiple sitemap module  is not correct.'),
-    );
+    ];
   }
+
 }
diff --git a/src/Forms/MultipleSitemapForm.php b/src/Forms/MultipleSitemapForm.php
index 2116306..b7802a2 100644
--- a/src/Forms/MultipleSitemapForm.php
+++ b/src/Forms/MultipleSitemapForm.php
@@ -6,7 +6,6 @@ use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\multiple_sitemap\Controller\MultipleSitemap;
-use Drupal\multiple_sitemap\MultipleSitemapDB;
 use Drupal\Core\Messenger\MessengerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -16,28 +15,30 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class MultipleSitemapForm extends FormBase {
 
   /**
-   * The DB object.
+   * The Messenger service.
    *
-   * @var \Drupal\multiple_sitemap\MultipleSitemapDB
+   * @var \Drupal\Core\Messenger\MessengerInterface
    */
-  private $dbObject;
+  protected $messenger;
 
   /**
-   * The Messenger service.
+   * The sitemap db.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var \Drupal\multiple_sitemap\MultipleSitemapDB
    */
-  protected $messenger;
+  protected $sitemapDb;
 
   /**
    * MultipleSitemapForm class constructor.
    *
    * @param \Drupal\Core\Messenger\MessengerInterface $messenger
    *   The messenger service.
+   * @param string $sitemap_db
+   *   The sitemap_db string.
    */
-  public function __construct(MessengerInterface $messenger) {
-    $this->dbObject = new MultipleSitemapDB();
+  public function __construct(MessengerInterface $messenger, $sitemap_db) {
     $this->messenger = $messenger;
+    $this->sitemapDb = $sitemap_db;
   }
 
   /**
@@ -45,7 +46,8 @@ class MultipleSitemapForm extends FormBase {
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get('messenger')
+      $container->get('messenger'),
+      $container->get('multiple_sitemap.db')
     );
   }
 
@@ -67,7 +69,7 @@ class MultipleSitemapForm extends FormBase {
     $arguments = [];
     if ($ms_id && $routeName == 'multiple_sitemap.edit_multiple_sitemap') {
       if (is_numeric($ms_id) && $ms_id > 0) {
-        $arguments = $this->dbObject->multiple_sitemap_get_record($ms_id);
+        $arguments = $this->sitemapDb->multiple_sitemap_get_record($ms_id);
         if (!empty($arguments)) {
           $form_state->setStorage(['update_ms_id' => $ms_id]);
         }
@@ -75,7 +77,7 @@ class MultipleSitemapForm extends FormBase {
     }
 
     $form['file_name'] = [
-      '#title' => t('Filename'),
+      '#title' => $this->t('Filename'),
       '#type' => 'textfield',
       '#default_value' => isset($arguments['file_name']) ? $arguments['file_name'] : '',
       '#description' => t('Enter file name without xml extension.Allowed only "a-z, - and _"'),
@@ -196,19 +198,17 @@ class MultipleSitemapForm extends FormBase {
     $selected_vocab = [];
 
     // Get selected vocab types.
-    $vocab_types = $form_state->getValue('vocab');
-    if (!empty($vocab_types)) {
-      foreach ($vocab_types as $i => $vocab_type) {
-        foreach ($vocab_type['vocab_type'] as $key => $value) {
-          if ($key === $value) {
-
-            $priority = isset($vocab_type['priority']) ? $vocab_type['priority'] : '0.5';
-            $changefreq = isset($vocab_type['changefreq']) ? $vocab_type['changefreq'] : 'monthly';
-
-            $selected_vocab[$i]['name'] = $value;
-            $selected_vocab[$i]['priority'] = $priority;
-            $selected_vocab[$i]['changefreq'] = $changefreq;
-          }
+    $vocab_types = $form_state->getValue('vocab') ?? [];
+    foreach ($vocab_types as $i => $vocab_type) {
+      foreach ($vocab_type['vocab_type'] as $key => $value) {
+        if ($key === $value) {
+
+          $priority = isset($vocab_type['priority']) ? $vocab_type['priority'] : '0.5';
+          $changefreq = isset($vocab_type['changefreq']) ? $vocab_type['changefreq'] : 'monthly';
+
+          $selected_vocab[$i]['name'] = $value;
+          $selected_vocab[$i]['priority'] = $priority;
+          $selected_vocab[$i]['changefreq'] = $changefreq;
         }
       }
     }
@@ -218,7 +218,7 @@ class MultipleSitemapForm extends FormBase {
     $input['file_name'] = $file_name;
     $input['custom_links'] = $custom_links;
 
-    $multipleSitemapObj = new MultipleSitemapDB();
+    $multipleSitemapObj = $this->sitemapDb;
 
     $update_ms_id = $form_state->getStorage();
     $update_ms_id = isset($update_ms_id['update_ms_id']) ? $update_ms_id['update_ms_id'] : NULL;
diff --git a/src/Forms/MultipleSitemapFormDelete.php b/src/Forms/MultipleSitemapFormDelete.php
index 5a5eb9b..098126a 100644
--- a/src/Forms/MultipleSitemapFormDelete.php
+++ b/src/Forms/MultipleSitemapFormDelete.php
@@ -10,8 +10,6 @@ use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Url;
-use Drupal\multiple_sitemap\Controller\MultipleSitemap;
-use Drupal\multiple_sitemap\MultipleSitemapDB;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
@@ -26,6 +24,13 @@ class MultipleSitemapFormDelete extends ConfirmFormBase {
    */
   protected $id;
 
+  /**
+   * The sitemap db.
+   *
+   * @var \Drupal\multiple_sitemap\MultipleSitemapDB
+   */
+  protected $sitemapDb;
+
   /**
    * The Messenger service.
    *
@@ -33,9 +38,18 @@ class MultipleSitemapFormDelete extends ConfirmFormBase {
    */
   protected $messenger;
 
-  public function __construct(MessengerInterface $messenger)
+  /**
+   * MultipleSitemapFormDelete class constructor.
+   *
+   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   *   The messenger service.
+   * @param string $sitemap_db
+   *   The sitemap_db string.
+   */
+  public function __construct(MessengerInterface $messenger, $sitemap_db)
   {
     $this->messenger = $messenger;
+    $this->sitemapDb = $sitemap_db;
   }
 
   /**
@@ -43,7 +57,8 @@ class MultipleSitemapFormDelete extends ConfirmFormBase {
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get('messenger')
+      $container->get('messenger'),
+      $container->get('multiple_sitemap.db')
     );
   }
 
@@ -112,7 +127,7 @@ class MultipleSitemapFormDelete extends ConfirmFormBase {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $conn = \Drupal::database();
     $ms_id = $this->id;
-    $obj = new MultipleSitemapDB();
+    $obj = $this->sitemapDb;
 
     // Delete xml file
     $obj->delete_multiple_sitemap_xml_file($ms_id);
diff --git a/src/MultipleSitemapDB.php b/src/MultipleSitemapDB.php
index a603180..0a5ae7f 100644
--- a/src/MultipleSitemapDB.php
+++ b/src/MultipleSitemapDB.php
@@ -1,15 +1,44 @@
 <?php
 
-/**
- * @file
- * Contain database function for multiple sitemap.
- */
-
 namespace Drupal\multiple_sitemap;
+
+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Url;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
 
+/**
+ *
+ */
 class MultipleSitemapDB {
 
+  use StringTranslationTrait;
+  /**
+   * The Messenger service.
+   *
+   * @var \Drupal\Core\Messenger\MessengerInterface
+   */
+  protected $messenger;
+
+  /**
+   * MultipleSitemapForm class constructor.
+   *
+   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   *   The messenger service.
+   */
+  public function __construct(MessengerInterface $messenger) {
+    $this->messenger = $messenger;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('messenger')
+    );
+  }
+
   /**
    * Save records into database.
    *
@@ -21,38 +50,38 @@ class MultipleSitemapDB {
    * @return int
    *   Ms id.
    */
-  public function multiple_sitemap_save_record($input = array(), $update_ms_id = NULL) {
+  public function multiple_sitemap_save_record($input = [], $update_ms_id = NULL) {
     $ms_id = NULL;
     $conn = \Drupal::database();
     if (is_null($update_ms_id) && !empty($input)) {
       // Insert new record.
       try {
         $ms_id = $conn->insert('multiple_sitemap')
-          ->fields(array(
+          ->fields([
             'file_name' => $input['file_name'],
             'custom_links' => $input['custom_links'],
-          ))
+          ])
           ->execute();
       }
       catch (Exception $e) {
-        drupal_set_message(t('File name already exist'), 'error');
+        $this->messenger->addMessage($this->t(('File name already exist'), $this->messenger::TYPE_ERROR));
       }
     }
     else {
       // Update record.
       try {
         $ms_id = $conn->update('multiple_sitemap')
-          ->fields(array(
+          ->fields([
             'file_name' => $input['file_name'],
             'custom_links' => $input['custom_links'],
-          ))
+          ])
           ->condition('ms_id', $update_ms_id, '=')
           ->execute();
 
         $ms_id = $update_ms_id;
       }
       catch (Exception $e) {
-        drupal_set_message(t('Some thing is wrong here.'), 'error');
+        $this->messenger->addMessage($this->t('Some thing is wrong here.'), $this->messenger::TYPE_ERROR);
       }
     }
 
@@ -70,7 +99,7 @@ class MultipleSitemapDB {
    */
   public function multiple_sitemap_get_record($ms_id = NULL) {
     $conn = \Drupal::database();
-    $records = array();
+    $records = [];
     if (!(is_null($ms_id))) {
       $query = $conn->select('multiple_sitemap', 'ms');
       $query->fields('ms');
@@ -80,10 +109,10 @@ class MultipleSitemapDB {
         $records = $result;
       }
 
-      $record_types = array('content', 'menu', 'vocab');
+      $record_types = ['content', 'menu', 'vocab'];
       // $ms_id = db_insert('multiple_sitemap_' . $record_type)
       foreach ($record_types as $record_type) {
-        $subrecords = array();
+        $subrecords = [];
         $query = $conn->select('multiple_sitemap_' . $record_type, 'ms');
         $query->fields('ms');
         $query->condition('target_ms_id', $ms_id, '=');
@@ -111,7 +140,7 @@ class MultipleSitemapDB {
    * @param array $subrecords
    *   Having sub records.
    */
-  public function multiple_sitemap_save_sub_record($record_type = NULL, $ms_target_id = NULL, $subrecords = array()) {
+  public function multiple_sitemap_save_sub_record($record_type = NULL, $ms_target_id = NULL, $subrecords = []) {
 
     $conn = \Drupal::database();
 
@@ -119,7 +148,7 @@ class MultipleSitemapDB {
     if (!is_null($ms_target_id) && !is_null($record_type) && !empty($subrecords)) {
 
       // Record types.
-      $record_types = array('content', 'menu', 'vocab');
+      $record_types = ['content', 'menu', 'vocab'];
 
       // Check existence of record type.
       if (in_array($record_type, $record_types)) {
@@ -127,21 +156,21 @@ class MultipleSitemapDB {
           // Insert each record.
           try {
             $conn->insert('multiple_sitemap_' . $record_type)
-              ->fields(array(
+              ->fields([
                 'target_ms_id' => $ms_target_id,
                 $record_type . '_type' => $subrecord['name'],
                 'priority' => $subrecord['priority'],
                 'changefreq' => $subrecord['changefreq'],
-              ))
+              ])
               ->execute();
           }
           catch (Exception $e) {
-            drupal_set_message(t('Record already exist'), 'error');
+            $this->messenger->addMessage($this->t('Record already exist.'), $this->messenger::TYPE_ERROR);
           }
         }
       }
       else {
-        drupal_set_message(t('Recors type does not exist'), 'error');
+        $this->messenger->addMessage($this->t('Record type does not exist.'), $this->messenger::TYPE_ERROR);
       }
     }
   }
@@ -160,7 +189,7 @@ class MultipleSitemapDB {
     if (!is_null($ms_target_id) && !is_null($record_type)) {
 
       // Record types.
-      $record_types = array('content', 'menu', 'vocab');
+      $record_types = ['content', 'menu', 'vocab'];
 
       // Check existence of record type.
       if (in_array($record_type, $record_types)) {
@@ -171,7 +200,7 @@ class MultipleSitemapDB {
             ->execute();
         }
         catch (Exception $e) {
-          drupal_set_message(t('Record is not deleted'), 'error');
+          $this->messenger->addMessage($this->t('Record is not deleted'), $this->messenger::TYPE_ERROR);
         }
       }
     }
@@ -185,9 +214,9 @@ class MultipleSitemapDB {
    */
   public function multiple_sitemap_get_files_name() {
     $conn = \Drupal::database();
-    $records = array();
+    $records = [];
     $query = $conn->select('multiple_sitemap', 'ms');
-    $query->fields('ms', array('ms_id', 'file_name'));
+    $query->fields('ms', ['ms_id', 'file_name']);
     $results = $query->execute();
     if (!empty($results)) {
       foreach ($results as $result) {
@@ -207,9 +236,9 @@ class MultipleSitemapDB {
    * @return array
    *   Having content links.
    */
-  public function multiple_sitemap_get_content_links($contents = array()) {
+  public function multiple_sitemap_get_content_links($contents = []) {
 
-    $content_links = array();
+    $content_links = [];
     $conn = \Drupal::database();
 
     $i = 0;
@@ -220,7 +249,7 @@ class MultipleSitemapDB {
 
         // Get the all links for given type.
         $query = $conn->select('node', 'n');
-        $query->fields('n', array('nid'));
+        $query->fields('n', ['nid']);
         $query->condition('type', $type);
 
         $results = $query->execute();
@@ -251,10 +280,10 @@ class MultipleSitemapDB {
    * @return array
    *   Having menus links.
    */
-  public function multiple_sitemap_get_menu_links($menus = array()) {
+  public function multiple_sitemap_get_menu_links($menus = []) {
     $conn = \Drupal::database();
 
-    $menu_links = array();
+    $menu_links = [];
     $i = 0;
 
     if (!empty($menus)) {
@@ -263,15 +292,15 @@ class MultipleSitemapDB {
         $type = $menu->menu_type;
 
         $query = $conn->select('menu_link_content_data', 'ml');
-        $query->fields('ml', array('link__uri'));
+        $query->fields('ml', ['link__uri']);
         $query->condition('menu_name', $type, '<>');
         $query->condition('enabled', '1', '=');
-        $query->condition('link__uri', '%' . db_like('%') . '%', 'NOT LIKE');
-        $query->condition('link__uri', '%' . db_like('<') . '%', 'NOT LIKE');
+        $query->condition('link__uri', '%' . $conn->escapeLike('%') . '%', 'NOT LIKE');
+        $query->condition('link__uri', '%' . $conn->escapeLike('<') . '%', 'NOT LIKE');
         $results = $query->execute();
         if (!empty($results)) {
           foreach ($results as $value) {
-            $url = Url::fromUri($value->link__uri, ['absolute' => true])->toString();
+            $url = Url::fromUri($value->link__uri, ['absolute' => TRUE])->toString();
             $link = '/' . $url;
             $path = \Drupal::service('path.alias_manager')->getAliasByPath($link);
             // $path = Url::fromUserInput($path)->setAbsolute()->toString();
@@ -297,9 +326,9 @@ class MultipleSitemapDB {
    * @return array
    *   Having vocab links.
    */
-  public function multiple_sitemap_get_vocab_links($vocabs = array()) {
+  public function multiple_sitemap_get_vocab_links($vocabs = []) {
 
-    $vocab_links = array();
+    $vocab_links = [];
     $conn = \Drupal::database();
 
     $i = 0;
@@ -310,7 +339,7 @@ class MultipleSitemapDB {
 
         // Get the all terms for given type.
         $query = $conn->select('taxonomy_term_data', 't');
-        $query->fields('t', array('tid'));
+        $query->fields('t', ['tid']);
         $query->condition('vid', $type);
 
         $results = $query->execute();
@@ -347,9 +376,9 @@ class MultipleSitemapDB {
     }
 
     $conn = \Drupal::database();
-    $records = array();
+    $records = [];
     $query = $conn->select('multiple_sitemap', 'ms');
-    $query->fields('ms', array('file_name'));
+    $query->fields('ms', ['file_name']);
     $query->condition('ms_id', $ms_id, '=');
     $results = $query->execute();
     $filename = $results->fetchCol();
@@ -360,10 +389,9 @@ class MultipleSitemapDB {
       if (file_exists($file_name)) {
         unlink($file_name);
       }
-
       return TRUE;
     }
-
     return FALSE;
   }
+
 }
diff --git a/src/MultipleSitemapXml.php b/src/MultipleSitemapXml.php
index e3846f3..0f660d6 100644
--- a/src/MultipleSitemapXml.php
+++ b/src/MultipleSitemapXml.php
@@ -1,30 +1,20 @@
 <?php
 
-/**
- * @file
- * Contains the function for  multiple sitemap xml files.
- */
-
 namespace Drupal\multiple_sitemap;
 
 use Drupal\Core\Url;
-use Drupal\multiple_sitemap\MultipleSitemapDB;
 
+/**
+ *
+ */
 class MultipleSitemapXml {
 
-  private $dbObject;
-
-  public function __construct()
-  {
-     $this->dbObject = new MultipleSitemapDB();
-  }
-
   /**
    * Create xml sitemap.
    */
   public function multiple_sitemap_create_xml_sitemap() {
     // Create main sitemap xml file.First we have to get all files name.
-    $filesnames = $this->dbObject->multiple_sitemap_get_files_name();
+    $filesnames = \Drupal::service('multiple_sitemap.db')->multiple_sitemap_get_files_name();
     $this->multiple_sitemap_create_main_file($filesnames);
 
     // Create all sub files.
@@ -39,7 +29,7 @@ class MultipleSitemapXml {
    * @param array $filesnames
    *   Having file names.
    */
-  public function multiple_sitemap_create_main_file($filesnames = array()) {
+  public function multiple_sitemap_create_main_file($filesnames = []) {
 
     $dir_name = 'public://multiple_sitemap';
     if (!file_exists($dir_name)) {
@@ -143,12 +133,12 @@ class MultipleSitemapXml {
   public function multiple_sitemap_get_sub_file_links($ms_id) {
 
     // Get record for a file.
-    $records = $this->dbObject->multiple_sitemap_get_record($ms_id);
+    $records = \Drupal::service('multiple_sitemap.db')->multiple_sitemap_get_record($ms_id);
 
     // Get custom links.
     $custom_links = !empty($records['custom_links']) ? $records['custom_links'] : NULL;
 
-    $links = array();
+    $links = [];
     if (!is_null($custom_links)) {
 
       $custom_links = explode(',', $custom_links);
@@ -164,16 +154,16 @@ class MultipleSitemapXml {
     }
 
     // Get content types links.
-    $contents = !empty($records['content']) ? $records['content'] : array();
-    $content_links = $this->dbObject->multiple_sitemap_get_content_links($contents);
+    $contents = !empty($records['content']) ? $records['content'] : [];
+    $content_links = \Drupal::service('multiple_sitemap.db')->multiple_sitemap_get_content_links($contents);
 
     // Get Menus links.
-    $menus = !empty($records['menu']) ? $records['menu'] : array();
-    $menu_links = $this->dbObject->multiple_sitemap_get_menu_links($menus);
+    $menus = !empty($records['menu']) ? $records['menu'] : [];
+    $menu_links = \Drupal::service('multiple_sitemap.db')->multiple_sitemap_get_menu_links($menus);
 
     // Get Vocab links.
-    $vocabs = !empty($records['vocab']) ? $records['vocab'] : array();
-    $vocab_links = $this->dbObject->multiple_sitemap_get_vocab_links($vocabs);
+    $vocabs = !empty($records['vocab']) ? $records['vocab'] : [];
+    $vocab_links = \Drupal::service('multiple_sitemap.db')->multiple_sitemap_get_vocab_links($vocabs);
 
     $total_links = array_merge($links, $content_links);
     $total_links = array_merge($total_links, $menu_links);
@@ -181,8 +171,8 @@ class MultipleSitemapXml {
 
     $total_links = array_unique($total_links, SORT_REGULAR);
 
-    $usedVals = array();
-    $outArray = array();
+    $usedVals = [];
+    $outArray = [];
     foreach ($total_links as $arrayItem) {
       if (!in_array($arrayItem['link'], $usedVals)) {
         $outArray[] = $arrayItem;
@@ -192,4 +182,5 @@ class MultipleSitemapXml {
 
     return $outArray;
   }
+
 }
diff --git a/src/Plugin/QueueWorker/MultipleSitemapUpdateXml.php b/src/Plugin/QueueWorker/MultipleSitemapUpdateXml.php
index 01a7386..1333371 100644
--- a/src/Plugin/QueueWorker/MultipleSitemapUpdateXml.php
+++ b/src/Plugin/QueueWorker/MultipleSitemapUpdateXml.php
@@ -25,4 +25,5 @@ class MultipleSitemapUpdateXml extends QueueWorkerBase {
       $multiplesitemapxml->multiple_sitemap_create_xml_sitemap();
     }
   }
+
 }
